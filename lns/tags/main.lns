// -*- coding: utf-8 -*-

import lns.tags.DBCtrl;
import lns.tags.Analyze;
import lns.tags.Option;
import lns.tags.Util;
import lns.tags.Inq;
import lns.tags.Log;
import lns.tags.Pattern;
import go/github:com.ifritJP.LuneScript.src.lune.base.Types as LnsTypes;
import go/github:com.ifritJP.LuneScript.src.lune.base.Ast as LnsAst;


let dbPath = "lnstags.sqlite3";

fn inq( inqMode:Option.InqMode, pattern:str ) : int {
   let! mut db = DBCtrl.open( dbPath, false ) {
      print( "error" );
      return -1;
   };
   switch inqMode {
      case .Def {
         Inq.InqDef( db, pattern );
      }
      case .Ref {
         Inq.InqRef( db, pattern, false );
      }
      case .Set {
         Inq.InqRef( db, pattern, true );
      }
      case .AllMut {
         Inq.InqAllmut( db );
      }
      case .Async {
         Inq.InqAsync( db, .Async );
      }
      case .Noasync {
         Inq.InqAsync( db, .Noasync );
      }
      case .Luaval {
         Inq.InqLuaval( db );
      }
      case .AsyncLock {
         Inq.InqAsyncLock( db );
      }
   }
   db.close();
   return 0;
}

fn build( pathList:&List<str>, transCtrlInfo:&LnsTypes.TransCtrlInfo ) : int {
   // 現状は build 時に init する
   DBCtrl.initDB( dbPath );
   let! mut db = DBCtrl.open( dbPath, false ) {
      print( "error" );
      return 1;
   };
   db.commit();
   
   Analyze.start( db, pathList, transCtrlInfo );
   db.close();
   return 0;
}

pub fn __main( args:&List<str> ) : int {


   let mut option = Option.analyzeArgs( args );

   _switch option.$mode {
      case .Init {
         DBCtrl.initDB( dbPath );
      }
      case .Build {
         return build( option.$pathList, option.$transCtrlInfo );
      }
      case .Update {
         let! mut db = DBCtrl.open( dbPath, true ) {
            print( "error" );
            return 1;
         };
         let projId = db.getProjId( "./" );
         let mut pathList:List<str> = [];
         db.mapFilePath( fn( item:&DBCtrl.ItemFilePath ) : bool {
            if item.$projId == projId and not db.getMainFilePath( item.$id ) {
               pathList.insert( item.$path );
            }
            return true;
         });
         db.close();

         return build( pathList, option.$transCtrlInfo );
      }
      case .Suffix {
         let! mut db = DBCtrl.open( dbPath, true ) {
            print( "error" );
            return 1;
         };

         db.mapNamespaceSuffix(
            option.$pattern,
            fn ( item:&DBCtrl.ItemNamespace ) : bool {
               print( item.$name );
               return true;
            });
         
         db.close();
      }
      case .Inq {
         inq( option.$inqMode, option.$pattern );
      }
      case .InqAt {
         let analyzeFileInfo = option.$analyzeFileInfo;

         let! mut db = DBCtrl.open( dbPath, true ) {
            print( "error" );
            return 1;
         };
         
         let! pattern = Pattern.getPatterAt(
            db, analyzeFileInfo, option.$inqMode, option.$transCtrlInfo ) {
            db.close();
            print( "illegal pos -- %s:%d:%d"
                   ( analyzeFileInfo.$path,
                     analyzeFileInfo.$lineNo, analyzeFileInfo.$column ) );
            return 1;
         };
         db.close();
         
         inq( option.$inqMode, pattern );
      }
      case .Dump {
         let! mut db = DBCtrl.open( dbPath, true ) {
            print( "error" );
            return 1;
         };
         db.dumpAll();
         // db.dumpFile();
         // db.dumpAsync();

         db.close();
      }
      case .Test {
         DBCtrl.test();
      }
   }
   

   return 0;
}
