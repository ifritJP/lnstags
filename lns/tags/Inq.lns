_lune_control default_strict_generics;

import lns.tags.DBCtrl;
import lns.tags.Util;
import go/github:com.ifritJP.LuneScript.src.lune.base.Ast as LuneAst;

pub fn InqDef( db:DBCtrl.DBCtrl, pattern:str ) {
   let mut factory = new Util.SourceCodeLineAccessorFactory();
   db.mapSymbolDecl(
      pattern, fn (item:&DBCtrl.ItemSymbolDecl):bool {
         let! path = db.getFilePath( item.$fileId ) {
            error( "file id is illegal -- %d" (item.$fileId) );
         };
         Util.outputLocate(
            io.stdout, pattern, path,
            factory.create( path## ), item.$line );
         return true;
      });
}

pub fn InqRef( db:DBCtrl.DBCtrl, pattern:str, onlySet:bool ) {
   let mut factory = new Util.SourceCodeLineAccessorFactory();
   db.mapSymbolRef(
      pattern, onlySet, fn (item:&DBCtrl.ItemSymbolRef):bool {
         let! path = db.getFilePath( item.$fileId ) {
            error( "file id is illegal -- %d" (item.$fileId) );
         };
         Util.outputLocate(
            io.stdout, pattern, path,
            factory.create( path## ), item.$line );
         return true;
      });
}

pub fn InqAllmut( db:DBCtrl.DBCtrl ) {
   let mut factory = new Util.SourceCodeLineAccessorFactory();
   db.mapAllmutDecl(
      fn (item:&DBCtrl.ItemAllmutDecl):bool {
         let! path = db.getFilePath( item.$fileId ) {
            error( "file id is illegal -- %d" (item.$fileId) );
         };
         Util.outputLocate(
            io.stdout, "allmut", path,
            factory.create( path## ), item.$line );
         return true;
      });
}

pub fn InqAsync( db:DBCtrl.DBCtrl, asyncMode:LuneAst.Async ) {
   let mut factory = new Util.SourceCodeLineAccessorFactory();
   db.mapAsyncMode(
      asyncMode,
      fn (item:&DBCtrl.ItemAsyncMode):bool {
         let! path = db.getFilePath( item.$fileId ) {
            error( "file id is illegal -- %d" (item.$fileId) );
         };
         Util.outputLocate(
            io.stdout, "%d" (asyncMode), path,
            factory.create( path## ), item.$line );
         return true;
      });
}

pub fn InqLuaval( db:DBCtrl.DBCtrl ) {
   let mut factory = new Util.SourceCodeLineAccessorFactory();
   db.mapLuavalRef(
      fn (item:&DBCtrl.ItemLuavalRef):bool {
         let! path = db.getFilePath( item.$fileId ) {
            error( "file id is illegal -- %d" (item.$fileId) );
         };
         Util.outputLocate(
            io.stdout, "luaval", path, factory.create( path## ), item.$line );
         return true;
      });
}

pub fn InqAsyncLock( db:DBCtrl.DBCtrl ) {
   let mut factory = new Util.SourceCodeLineAccessorFactory();
   db.mapAsyncLock(
      fn (item:&DBCtrl.ItemAsyncLock):bool {
         let! path = db.getFilePath( item.$fileId ) {
            error( "file id is illegal -- %d" (item.$fileId) );
         };
         Util.outputLocate(
            io.stdout, "luaval", path, factory.create( path## ), item.$line );
         return true;
      });
}
