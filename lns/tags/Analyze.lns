// -*- coding: utf-8 -*-

import lns.tags.DBCtrl;
import lns.tags.Option;
import lns.tags.Log;
import lns.tags.Ast;
import go/github:com.ifritJP.LuneScript.src.lune.base.Option as LnsOpt;
import go/github:com.ifritJP.LuneScript.src.lune.base.Nodes;
import go/github:com.ifritJP.LuneScript.src.lune.base.Parser;
import go/github:com.ifritJP.LuneScript.src.lune.base.TransUnit;
import go/github:com.ifritJP.LuneScript.src.lune.base.front;
import go/github:com.ifritJP.LuneScript.src.lune.base.Ast as LnsAst;
import go/github:com.ifritJP.LuneScript.src.lune.base.Types;
import go/github:com.ifritJP.LuneScript.src.lune.base.LuaVer;
import go/github:com.ifritJP.LuneScript.src.lune.base.Log as LnsLog;
import go/github:com.ifritJP.LuneScript.src.lune.base.Util as LnsUtil;

class Opt {
}

class tagFilter extend Nodes.Filter<Opt> {
   let mut db:DBCtrl.DBCtrl;
   let streamName:str;
   let mut type2nsid:Map<&LnsAst.TypeInfo,int>;
   let mut sym2nsid:Map<&LnsAst.SymbolInfo,int>;
   let mut file2id:Map<str,int>;
   let moduleTypeInfo:&LnsAst.TypeInfo;
   
   fn addFileId( path:str, mod:str ) mut : int {
      if! self.file2id[ path ] {
         return _exp;
      }
      let fileId = self.db.addFile( path, mod );
      Log._log( .Debug, "add file -- %d, %s" (fileId, path) );
      self.file2id[ path ] = fileId;
      return fileId;
   }
   
   fn getFileId( path:str ) mut : int {
      if! self.file2id[ path ] {
         return _exp;
      }
      let fileId = self.db.getFileIdFromPath( path );
      self.file2id[ path ] = fileId;
      return fileId;
   }

   
   local fn __init( rootNode:&Nodes.RootNode,
                    db:DBCtrl.DBCtrl, streamName:str )
   {
      super( true, rootNode.$moduleTypeInfo, rootNode.$moduleTypeInfo.$scope );
      self.moduleTypeInfo = rootNode.$moduleTypeInfo;
      self.file2id = {};
      self.db = db;
      self.streamName = streamName;
      self.type2nsid = {};
      self.sym2nsid = {};
      let mod = self.getFull( rootNode.$moduleTypeInfo, false );
      self.addFileId( streamName, mod );
   }
}

fn tagFilter.registerType( mut typeInfo:&LnsAst.TypeInfo ) mut : int, bool {
   typeInfo = typeInfo.$nonnilableType.$srcTypeInfo.$genSrcTypeInfo;
   if! self.type2nsid[ typeInfo ] {
      return _exp, false;
   }
   let parentNsId = self.registerType( typeInfo.$parentInfo );
   let name = self.getFull( typeInfo, false );
   let nsId, added = self.db.addNamespace( name, parentNsId );
   Log._log( .Debug, "%s %s %d" (name, added, nsId ) );
   self.type2nsid[ typeInfo ] = nsId;
   return nsId, added;
}

fn tagFilter.registerSymbol( mut symbolInfo:&LnsAst.SymbolInfo ) mut : int, bool
{
   symbolInfo = symbolInfo.getOrg();
   if! self.sym2nsid[ symbolInfo ] {
      return _exp, false;
   }
   let parentNsId = self.registerType( symbolInfo.$namespaceTypeInfo );
   let name = Ast.getFullNameSym( self, symbolInfo );
   let nsId, added = self.db.addNamespace( name, parentNsId );
   Log._log( .Debug, "%s %s %d" (name, added, nsId ) );
   self.sym2nsid[ symbolInfo ] = nsId;
   return nsId, added;
}

fn tagFilter.registDeclSym( symbolInfo:&LnsAst.SymbolInfo ) mut : int {
   let symNsId = self.registerSymbol( symbolInfo );
   let pos = unwrap symbolInfo.$pos$.$orgPos;
   let fileId = self.getFileId( pos.streamName );
   self.db.addSymbolDecl( symNsId, fileId, pos.lineNo, pos.column );
   Log._log( .Debug, symbolInfo.$name );
   return symNsId;
}

fn tagFilter.addSymbolRef( mbrNsId:int, mut pos:&Types.Position, setOp:bool ) mut
{
   pos = pos.$orgPos;
   self.db.addSymbolRef(
      mbrNsId, self.getFileId( pos.streamName ), pos.lineNo, pos.column, setOp );
}



fn tagFilter.registerDecl(
   nodeManager:&Nodes.NodeManager, processInfo: LnsAst.ProcessInfo ) mut
{
   fn registDeclTypeOp( typeInfo:&LnsAst.TypeInfo, mut pos:&Types.Position ) : int {
      let nsId = self.registerType( typeInfo );
      pos = pos.$orgPos;
      self.db.addSymbolDecl( nsId, self.getFileId( pos.$streamName ),
                             pos.lineNo, pos.column );   
      return nsId;
   }
   fn registDeclType( workNode:&Nodes.Node ) : int {
      return registDeclTypeOp( workNode.$expType, workNode.$pos );
   }

   fn registerAutoMethod( parentInfo:&LnsAst.TypeInfo, pos:&Types.Position ) {
      foreach symbolInfo in unwrap parentInfo.$scope$.$symbol2SymbolInfoMap {
         let typeInfo = symbolInfo.$typeInfo;
         if typeInfo.$autoFlag {
            registDeclTypeOp( typeInfo, pos );
         }
      }
   }

   // ======== 型の定義系 ======
   foreach workNode in nodeManager.getDeclFormNodeList() {
      registDeclType( workNode );
      foreach altType in workNode.$expType.$itemTypeInfoList {
         registDeclTypeOp( altType, workNode.$pos );
      }
   }

   foreach workNode in nodeManager.getProtoClassNodeList() {
      registDeclType( workNode );
   }
   
   foreach workNode in nodeManager.getDeclClassNodeList() {
      registDeclType( workNode );
      foreach altType in workNode.$expType.$itemTypeInfoList {
         registDeclTypeOp( altType, workNode.$pos );
      }
      registerAutoMethod( workNode.$expType, workNode.$pos );
   }

   foreach workNode in nodeManager.getDeclConstrNodeList() {
      registDeclType( workNode );
   }

   foreach workNode in nodeManager.getDeclFuncNodeList() {
      registDeclType( workNode );
      foreach altType in workNode.$expType.$itemTypeInfoList {
         registDeclTypeOp( altType, workNode.$pos );
      }
   }
   foreach workNode in nodeManager.getProtoMethodNodeList() {
      registDeclType( workNode );
   }

   fn addMethod( methodType:&LnsAst.TypeInfo, pos:&Types.Position ) : int {
      let nsId = registDeclTypeOp( methodType, pos );
      if not methodType.$staticFlag {
         if! let scope = methodType.$parentInfo.$scope {
            scope.filterTypeInfoFieldAndIF(
               false, scope, .Normal,
               fn ( symbolInfo:&LnsAst.SymbolInfo ) : bool {
                  if symbolInfo.$name == methodType.$rawTxt {
                     let superNsId = self.registerType( symbolInfo.$typeInfo );
                     self.db.addOverride( nsId, superNsId );
                  }
                  return true;
               } );
         }
      }
      foreach altType in methodType.$itemTypeInfoList {
         registDeclTypeOp( altType, pos );
      }
      return nsId;
   }
   foreach workNode in nodeManager.getDeclMethodNodeList() {
      addMethod( workNode.$expType, workNode.$pos );
   }
   foreach workNode in nodeManager.getDeclEnumNodeList() {
      registDeclType( workNode );
      registerAutoMethod( workNode.$expType, workNode.$pos );
      foreach name in workNode.$valueNameList {
         if! workNode.$scope.getSymbolInfoChild( name.txt ) {
            self.registDeclSym( _exp );
         }
      }
   }
   foreach workNode in nodeManager.getDeclAlgeNodeList() {
      registDeclType( workNode );
      forsort _, name in workNode.$algeType.$valInfoMap {
         if! workNode.$algeType.$scope$.getSymbolInfoChild$( name ) {
            self.registDeclSym( _exp );
         }
      }
   }
   foreach workNode in nodeManager.getDeclMacroNodeList() {
      registDeclType( workNode );
   }

   foreach workNode in nodeManager.getAliasNodeList() {
      registDeclTypeOp( workNode.$expType, unwrap workNode.$newSymbol.$pos );
   }

   // ======== シンボルの定義系 ======
   foreach workNode in nodeManager.getImportNodeList() {
      self.registDeclSym( workNode.$symbolInfo );
   }
   
   foreach workNode in nodeManager.getDeclVarNodeList() {
      foreach symbolInfo in workNode.$symbolInfoList {
         if symbolInfo.$scope == self.moduleTypeInfo.$scope {
            // 最上位スコープの変数を登録する
            self.registDeclSym( symbolInfo );
         }
      }
   }
   foreach workNode in nodeManager.getDeclMemberNodeList() {
      let mbrNsId = self.registDeclSym( workNode.$symbolInfo );
      if workNode.$getterMode ~= .None {
         let name = "get_%s" (workNode.$name.txt);
         let pos = unwrap workNode.$getterToken$.pos;
         addMethod(
            unwrap workNode.$classType.$scope$.getTypeInfoChild$( name ), pos );      
         // getter に、メンバー参照を追加
         self.addSymbolRef( mbrNsId, pos, true );
      }
      if workNode.$setterMode ~= .None {
         let name = "set_%s" (workNode.$name.txt);
         let pos = unwrap workNode.$setterToken$.pos;
         addMethod(
            unwrap workNode.$classType.$scope$.getTypeInfoChild$( name ), pos );
         // setter に、メンバー参照を追加
         self.addSymbolRef( mbrNsId, pos, false );
      }
   }
}

fn tagFilter.registerRefs( nodeManager:&Nodes.NodeManager ) mut {

   fn addSymbolRef( symbolInfo:&LnsAst.SymbolInfo, pos:&Types.Position, setOp:bool ) {
      switch symbolInfo.$name {
         case "__func__", "__mod__", "__line__" {
            return;
         }
      }
      let nsId, added = self.registerSymbol( symbolInfo );
      if added and not LnsAst.isBuiltin( symbolInfo.$namespaceTypeInfo.$typeId ) {
         Log._log( .Err, "no register sym -- %d:%d:%s"
                   ( pos.lineNo, pos.column, Ast.getFullNameSym( self, symbolInfo ) ) );
      }
      self.addSymbolRef( nsId, pos, setOp );
   }

   fn registerRefType( typeInfo:&LnsAst.TypeInfo, pos:&Types.Position ) {
      let nsId, added = self.registerType( typeInfo );
      if added and not LnsAst.isBuiltin( typeInfo.$typeId ) {
         Log._log( .Err, "no register type -- %d:%d:%s"
                   ( pos.lineNo, pos.column, self.getFull( typeInfo, false ) ) );
      }
      self.addSymbolRef( nsId, pos, true );
   }

   
   fn registerRefSym(
      symbolInfo:&LnsAst.SymbolInfo, pos:&Types.Position, setOp:bool )
   {
      switch symbolInfo.$namespaceTypeInfo.$kind {
         case .Enum, .Alge {
            addSymbolRef( symbolInfo, pos, true );
         }
         default {
            _switch symbolInfo.$kind {
               case .Fun, .Mac, .Mtd {
                  registerRefType( symbolInfo.$typeInfo, pos );
               }
               case .Typ{
                  if symbolInfo.$typeInfo.$kind == .Module {
                     addSymbolRef( symbolInfo, pos, true );
                  }
                  registerRefType( symbolInfo.$typeInfo, pos );
               }
               case .Mbr {
                  addSymbolRef( symbolInfo, pos, setOp );
               }
               case .Var {
                  if LnsAst.isPubToExternal( symbolInfo.$accessMode ) or
                     symbolInfo.$scope == self.moduleTypeInfo.$scope
                  {
                     addSymbolRef( symbolInfo, pos, setOp );
                  }
               }
               case .Arg {
                  // 引数の参照は DB に保持しない
               }
            }
         }
      }
   }

   // ======== 代入系 ========
   // 代入系を先に設定して、 setOp フラグが更新されないようにする。
   foreach workNode in nodeManager.getExpSetValNodeList() {
      foreach leftSym in workNode.$LeftSymList {
         switch leftSym.$kind {
            case .Mbr {
               registerRefSym( leftSym, workNode.$pos, true );
            }
            case .Var {
               if LnsAst.isPubToExternal( leftSym.$accessMode ) or
                  leftSym.$scope == self.moduleTypeInfo.$scope
               {
                  registerRefSym( leftSym, workNode.$pos, true );
               }
            }
         }
      }
   }


   
   // ======== 参照系 ========
   foreach workNode in nodeManager.getExpNewNodeList() {
      registerRefType( workNode.$ctorTypeInfo, workNode.$pos );
   }
   
   foreach workNode in nodeManager.getExpCallSuperCtorNodeList() {
      registerRefType( workNode.$methodType, workNode.$pos );
   }

   foreach workNode in nodeManager.getExpCallSuperNodeList() {
      registerRefType( workNode.$methodType, workNode.$pos );
   }

   foreach workNode in nodeManager.getExpRefNodeList() {
      registerRefSym( workNode.$symbolInfo, workNode.$pos, false );
   }
   foreach workNode in nodeManager.getRefFieldNodeList() {
      if! workNode.$symbolInfo {
         registerRefSym( _exp, workNode.$pos, false );
      } else {
         Log._log( .Warn, "no symbolInfo -- %s" (workNode.$field.txt ) );
      }
   }
   foreach workNode in nodeManager.getGetFieldNodeList() {
      registerRefType( workNode.$getterTypeInfo, workNode.$pos );
   }
   foreach workNode in nodeManager.getExpOmitEnumNodeList() {
      if! workNode.$enumTypeInfo.$scope$.getSymbolInfoChild$( workNode.$valInfo.$name ) {
         registerRefSym( _exp, workNode.$pos, false );
      }
   }

   foreach workNode in nodeManager.getMatchNodeList() {
      foreach matchCase in workNode.$caseList {
         let valInfo = matchCase.$valInfo;
         if! valInfo.$algeTpye.$scope$.getSymbolInfoChild$( valInfo.$name ) {
            registerRefSym( _exp, matchCase.$block.$pos, false );
         }
      }
   }
}

pub override fn tagFilter.processRoot(
   node: Nodes.RootNode, opt:Opt ) mut
{
   self.type2nsid[ LnsAst.headTypeInfo ] = DBCtrl.rootNsId;
   let modNsId = self.registerType( node.$moduleTypeInfo );

   let fileId = self.getFileId( self.streamName );
   self.db.addSymbolDecl( modNsId, fileId, 1, 1);

   let projDir = DBCtrl.getProjDir(
      self.streamName, self.getFull( node.$moduleTypeInfo, false ) );
   foreach workNode in node.$nodeManager.getSubfileNodeList() {
      if! let usePath = workNode.$usePath {
         let subPath = LnsUtil.pathJoin( projDir, usePath.gsub( "%.", "/" ) .. ".lns" );
         let subId = self.addFileId( subPath, usePath );
         self.db.addSubfile( fileId, subId );
      }
   }
   

   self.registerDecl( node.$nodeManager, node.$processInfo );
   self.registerRefs( node.$nodeManager );
};


fn dumpRoot( rootNode:&Nodes.RootNode, db:DBCtrl.DBCtrl, streamName:str )
{
   Log._log( .Log, streamName );
   let mut filter = new tagFilter( rootNode, db, streamName );
   rootNode.processFilter( filter, new Opt() );
}

pub fn start( db:DBCtrl.DBCtrl, pathList:&List<str> ) {

   let mut set:Set<str> = (@);
   
   Ast.buildAst( .Log, pathList, nil, nil, true, fn ( ast: TransUnit.ASTInfo ) {
      if not set.has( ast.$streamName ) {
         set.add( ast.$streamName );
         if! let rootNode = ast.$node@@@Nodes.RootNode {
            db.begin();
            dumpRoot( rootNode, db, ast.$streamName );
            db.commit();
         }
      }
   });
}
