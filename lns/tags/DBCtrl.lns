// -*- coding: utf-8 -*-

_lune_control default_async_all;


import go/github:com.ifritJP.lnssqlite3.src.lns.sqlite3.base;
import go/github:com.ifritJP.LuneScript.src.lune.base.Ast as LnsAst;
import lns.tags.DBAccess;
import lns.tags.Log;
import lns.tags.Depend;

pub let rootNsId = 1;
let userNsId = 2;
let systemFileId = 1;
let DB_VERSION = 10.0;

class IdMgr {
   let mut idNum:int;

   local fn __init( idNum:int ) {
      self.idNum = idNum;
   }
   
   local fn getIdNext() mut: int {
      let idNum = self.idNum;
      self.idNum = self.idNum + 1;
      return idNum;
   }
}

pub class DBCtrl {
   let mut access:DBAccess.DBAccess;
   
   local let mut projDir:str {pub};

   let mut idMgrNamespace:IdMgr;
   let mut idMgrSimpleName:IdMgr;
   let mut idMgrFilePath:IdMgr;
   let mut idMgrProjInfo:IdMgr;

   static fn getMaxId( access:DBAccess.DBAccess, tableName:str, defId:int ):int {
      let mut id:stem! = nil;
      access.mapRowList(
         tableName, nil, 1, "MAX(id)", nil,
         fn ( items:&Map<str,&stem>) __trans: bool {
            id = items.id;
            return false;
         },
         fn (stmt:str, msg:str) {
         }
      );
      when! id {
         return id@@int;
      }
      return defId;      
   }
   
   local fn __init( access:DBAccess.DBAccess, readonly:bool ) {
      self.access = access;
      self.projDir = Depend.getCurDir();

      self.idMgrNamespace = new IdMgr(
         DBCtrl.getMaxId( access, "namespace", userNsId ) );
      self.idMgrSimpleName = new IdMgr(
         DBCtrl.getMaxId( access, "simpleName", userNsId ) );
      self.idMgrFilePath = new IdMgr(
         DBCtrl.getMaxId( access, "filePath", userNsId ) );
      self.idMgrProjInfo = new IdMgr(
         DBCtrl.getMaxId( access, "projInfo", userNsId ) );
   }

   pub fn close() mut {
      self.access.close();
   }
   
   pub fn begin() mut {
      self.access.begin();
   }
   pub fn commit() mut {
      self.access.commit();
   }

   pub fn exec( stmt:str, errHandle:base.errHandleForm! ) mut {
      self.access.exec( stmt, errHandle );
   }

   pub fn insert( tableName:str, values:str ) mut {
      self.access.insert( tableName, values );
   }

   pub fn update( tableName:str, set:str, condition:str! ) mut
   {
      let mut sql = string.format( "UPDATE %s SET %s", tableName, set );
      if condition {
         sql = string.format( "%s WHERE %s", sql, condition );
      }
      self.exec( sql ## );
   }


   pub fn mapRowList( tableName:str, condition:str!,
                      limit:int!, attrib:str!, func:base.queryMapForm,
                      errHandle: base.errHandleForm! ) : bool
   {
      return self.access.mapRowList(
         tableName, condition, limit, attrib, nil, func, errHandle );
   }

   pub fn mapRowListSort( tableName:str, condition:str!, limit:int!, attrib:str!,
                          order:str!, func:base.queryMapForm,
                          errHandle: base.errHandleForm! ) : bool
   {
      return self.access.mapRowList(
         tableName, condition, limit, attrib, order, func, errHandle );
   }
   
   fn getRowList( tableName:str, condition:str!, limit:int!, attrib:str!,
                  errHandle: base.errHandleForm! ) : &List<&Map<str,&stem>>
   {
      let mut rows:List<&Map<str,&stem>> = [];
      self.mapRowList( tableName, condition, limit, attrib,
		       fn( items: &Map<str,&stem> ) __trans: bool
                       {
		          rows.insert( items );
		          return true;
                       }, errHandle );
      return rows;
   }

   fn mapJoin(
      tableName:str, otherTable:str, on:str, condition:str!,
      limit:int!, attrib:str!, func:base.queryMapForm,
      errHandle:base.errHandleForm! ) : bool
   {
      return self.access.mapJoin(
         tableName, otherTable, on, condition, limit, attrib, func, errHandle );
   }
   
   pub fn getRow( tableName:str, condition:str!, attrib:str!,
                  errHandle: base.errHandleForm! ) : &Map<str,&stem>!
   {
      let row = self.getRowList( tableName, condition, 1, attrib, errHandle );
      if #row == 0 {
         return nil;
      };
      return row[1];
   }

   pub fn getEtc( key:str ) : str! {
      if! let etc = self.getRow( "etc", "keyName = '" .. key .. "'" ## ) {
         if! let val = etc.val {
            return val@@str;
         }
      }
      return nil;
   }

   pub fn setEtc( key:str, val:str ) mut {
      let keyTxt = "keyName = '%s'" (key);
      let valTxt = "val = '%s'" (val);
      if not self.getEtc( key ) {
         self.insert( "etc", "'%s', '%s'" ( key, val ) );
      } else {
         self.update( "etc", valTxt, keyTxt );
      }
   }
   
   pub fn equalsEtc( key:str, val:str ) : bool {
      if self.getEtc( key ) == val {
         return true;
      }
      return false;
   }
   
   pub fn isKilling(): bool {
      if self.equalsEtc( "killFlag", "1" ) {
         return true;
      }
      return false;
   }
}

class ETC extend (Mapping) {
   let keyName:str {pub};
   let val:str {pub};
}

pub fn open( path:str, readonly:bool ) : DBCtrl!
{
   Log._log( .Log, "open" );
   let! mut db = DBAccess.open( path, readonly ) {
      return nil;
   };

   db.exec( "PRAGMA case_sensitive_like=ON;", nil );
   
   let mut dbCtrl = new DBCtrl( db, readonly );
   
   if not readonly {
      dbCtrl.begin();
   }

   let! item = ETC._fromStem( dbCtrl.getRow( "etc", "keyName = 'version'" ## ) ) {
      Log._log( .Err, "unknown version" );
      db.close();
      return nil;
   };
   if tonumber( item.$val ## ) ~= DB_VERSION {
      Log._log( .Err, "not support version. -- %s" ( item.$val ) );
      db.close();
      return nil;
   }


   if dbCtrl.isKilling() {
      error( "db is killed now" );
   }


   return dbCtrl;
}

local fn DBCtrl.creataTables() mut {
   self.exec( ```
BEGIN;
CREATE TABLE etc ( keyName VARCHAR UNIQUE COLLATE binary PRIMARY KEY, val VARCHAR);
INSERT INTO etc VALUES( 'version', '%d' );
INSERT INTO etc VALUES( 'projDir', '' );
INSERT INTO etc VALUES( 'killFlag', '0' );
CREATE TABLE namespace ( id INTEGER PRIMARY KEY, snameId INTEGER, parentId INTEGER, digest CHAR(32), name VARCHAR UNIQUE COLLATE binary, otherName VARCHAR COLLATE binary, virtual INTEGER);
INSERT INTO namespace VALUES( NULL, 1, 0, '', '', '', 0 );

CREATE TABLE simpleName ( id INTEGER PRIMARY KEY, name VARCHAR UNIQUE COLLATE binary);
CREATE TABLE projInfo ( id INTEGER PRIMARY KEY, dir VARCHAR UNIQUE COLLATE binary);
INSERT INTO projInfo VALUES( 1, '' );
CREATE TABLE filePath ( id INTEGER PRIMARY KEY, path VARCHAR UNIQUE COLLATE binary, mod VARCHAR COLLATE binary, projId INTEGER );
INSERT INTO filePath VALUES( 1, '', '', 1 );
CREATE TABLE subfile ( mainId INTEGER, subId INTEGER PRIMARY KEY );

CREATE TABLE override (nsId INTEGER, superNsId INTEGER, PRIMARY KEY (nsId, superNsId));
CREATE TABLE symbolDecl ( nsId INTEGER, snameId INTEGER, parentId INTEGER, type INTEGER, fileId INTEGER, line INTEGER, column INTEGER, endLine INTEGER, endColumn INTEGER, charSize INTEGER, comment VARCHAR COLLATE binary, hasBodyFlag INTEGER, PRIMARY KEY( nsId, fileId, line ) );
INSERT INTO symbolDecl VALUES( 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, '', 0 );

CREATE TABLE symbolRef ( nsId INTEGER, snameId INTEGER, fileId INTEGER, line INTEGER, column INTEGER, setOp INTEGER, belongNsId INTEGER, PRIMARY KEY( nsId, fileId, line, column ) );
CREATE TABLE symbolSet ( nsId INTEGER, snameId INTEGER, fileId INTEGER, line INTEGER, column INTEGER, belongNsId INTEGER, PRIMARY KEY( nsId, fileId, line, column ) );

CREATE TABLE funcCall ( nsId INTEGER, snameId INTEGER, belongNsId INTEGER, fileId INTEGER, line INTEGER, column INTEGER, endLine INTEGER, endColumn INTEGER, charSize INTEGER, PRIMARY KEY( nsId, belongNsId ) );

CREATE TABLE allmutDecl ( nsId INTEGER PRIMARY KEY );
CREATE TABLE asyncMode ( nsId INTEGER PRIMARY KEY, mode INTEGER );


CREATE TABLE incRef ( id INTEGER, baseFileId INTEGER, line INTEGER );
CREATE TABLE incCache ( id INTEGER, baseFileId INTEGER, incFlag INTEGER, PRIMARY KEY( id, baseFileId ) );
CREATE TABLE incBelong ( id INTEGER, baseFileId INTEGER, nsId INTEGER, PRIMARY KEY ( id, nsId ) );
CREATE INDEX index_ns ON namespace ( id, snameId, parentId, name, otherName );
CREATE INDEX index_sName ON simpleName ( id, name );
CREATE INDEX index_filePath ON filePath ( id, path, mod );
CREATE INDEX index_subfile ON subfile (subId );
CREATE INDEX index_override ON override (nsId, superNsId);
CREATE INDEX index_symDecl ON symbolDecl ( nsId, parentId, snameId, fileId );
CREATE INDEX index_symRef ON symbolRef ( nsId, snameId, fileId, belongNsId );
CREATE INDEX index_incRef ON incRef ( id, baseFileId );
CREATE INDEX index_incCache ON incCache ( id, baseFileId, incFlag );
CREATE INDEX index_incBelong ON incBelong ( id, baseFileId );
COMMIT;
``` ( DB_VERSION@@int ) ## );
}

class ItemProjInfo extend (Mapping) {
   let id:int {pub};
   let dir:str {pub};
}

pub class ItemFilePath extend (Mapping) {
   let id:int {pub};
   let path:str {pub};
   let mod:str {pub};
   let projId:int {pub};
}

pub class ItemNamespace extend (Mapping) {
   let id:int {pub};
   // simpleName の id
   let snameId:int {pub};
   // 親の namespace の id
   let parentId:int {pub};
   // 完全限定名 ( e.g. @hoge.@foo.bar)
   let name:str {pub};
}

pub class ItemAllmutDecl extend (Mapping) {
   let nsId:int {pub};
   let fileId:int {pub};
   let line:int {pub};
}

pub class ItemAsyncMode extend (Mapping) {
   let nsId:int {pub};
   let mode:LnsAst.Async {pub};
   let fileId:int {pub};
   let line:int {pub};
}

pub class ItemSymbolDecl extend (Mapping) {
   let nsId:int {pub};
   let fileId:int {pub};
   let line:int {pub};
   let column:int {pub};
}

pub class ItemSymbolRef extend (Mapping) {
   let nsId:int {pub};
   let fileId:int {pub};
   let line:int {pub};
   let column:int {pub};
   let setOp:int {pub};
}

pub class ItemOverride extend (Mapping) {
   let nsId:int {pub};
   let superNsId:int {pub};
}


pub fn DBCtrl.getProjId( path:str ) : int!
{
   let mut projId:int! = nil;
   self.mapRowList(
      "projInfo", "dir = '%s'" (path), 1, nil, fn( items: &Map<str,&stem> ) : bool
      {
         if! let projInfo = ItemProjInfo._fromStem( items ) {
            projId = projInfo.$id;
         }
         return false;
      }##);
   return projId;
}

/**
ファイルパス path を登録する。

登録済みの場合、登録済みの ID を返す。

@param path ファイルパス
@return int 登録 ID
@return bool 新規登録した場合 true
*/
pub fn DBCtrl.addProj( path:str ) mut : int, bool
{
   if! let projId = self.getProjId( path ) {
      return projId, false;
   }
   let id = self.idMgrProjInfo.getIdNext();
   self.insert( "projInfo", "%d,'%s'" ( id, path ) );

   return id, true;
}

pub fn getProjDir( path:str, mod:str ) : str {
   let mut workPath = mod.gsub( "@", "" ).gsub( "%.", "/" ) .. ".lns";
   let mut projDir = path.gsub( workPath .. "$", "" );
   if #mod ~= 0 and #projDir == 0 {
      projDir = "./";
   }
   return projDir;
}

fn normalizePath( path:str ) : str {
   return (path.gsub( "^%./", "" ));
}

/**
ファイルパス path を登録する。

登録済みの場合、登録済みの ID を返す。

@param path ファイルパス
@return int 登録 ID
@return bool 新規登録した場合 true
*/
pub fn DBCtrl.addFile( mut path:str, mod:str ) mut : int, bool
{
   path = normalizePath( path );
   
   let mut fileId:int! = nil;
   self.mapRowList(
      "filePath", "path = '%s'" (path), 1, nil, fn( items: &Map<str,&stem> ) : bool
      {
         if! let filePath = ItemFilePath._fromStem( items ) {
            fileId = filePath.$id;
         }
         return false;
      }##);
   when! fileId {
      return fileId, false;
   }

   let projDir = getProjDir( path, mod );
   let projId = self.addProj( projDir );
   
   let id = self.idMgrFilePath.getIdNext();
   self.insert( "filePath", "%d,'%s','%s', %d"
                ( id, path, mod.gsub( "@", "" ), projId ) );
   return id, true;
}

pub form MapFileCallBack( item:&ItemFilePath ) : bool;

pub fn DBCtrl.mapFilePath(callback:MapFileCallBack ) mut {
   self.mapRowList(
      "filePath", nil, nil, nil, fn( items: &Map<str,&stem> ) : bool
      {
         if! let filePath = ItemFilePath._fromStem( items ) {
            if not callback( filePath ) {
               return false;
            }
         }
         return true;
      }##);
}


pub fn DBCtrl.getFileIdFromPath( mut path:str ) mut : int {
   path = normalizePath( path );
   let mut fileId:int! = nil;
   self.mapRowList(
      "filePath", "path = '%s'" (path), 1, nil, fn( items: &Map<str,&stem> ) : bool
      {
         if! let filePath = ItemFilePath._fromStem( items ) {
            fileId = filePath.$id;
         }
         return false;
      }##);
   when! fileId {
      return fileId;
   }
   Log._log( .Err, "not found file -- %s" (path) );
   return rootNsId;
}

pub fn DBCtrl.getFilePath( fileId:int ) : str! {
   let mut path:str! = nil;
   self.mapRowList(
      "filePath", "id = %d" (fileId), 1, nil, fn( items: &Map<str,&stem> ) : bool
      {
         if! let obj = ItemFilePath._fromStem( items ) {
            path = obj.$path;
         }
         return false;
      }##);
   return path;
}

pub fn DBCtrl.addSubfile( mainId:int, subId:int ) mut
{
   self.insert( "subfile", "%d, %d" (mainId, subId ) );
}

pub fn DBCtrl.getMainFilePath( subId: int ) : str! {
   if! let map = self.getRow( "subfile", "subId = %d" (subId), "mainId" ## ) {
      if! let mainId = map.mainId {
         return self.getFilePath( mainId@@int );
      }
   }
   return nil;
}


fn DBCtrl.getName( nsId:int ) : str! {
   let mut name:str! = nil;
   self.mapRowList(
      "namespace", "id = %d" (nsId), 1, nil, fn( items: &Map<str,&stem> ) : bool
      {
         if! let obj = ItemNamespace._fromStem( items ) {
            name = obj.$name;
         }
         return false;
      }##);
   return name;
}


fn DBCtrl.getNsId( name:str ) : int! {
   let mut nsId:int! = nil;
   self.mapRowList(
      "namespace", "name = '%s'" (name), 1, nil, fn( items: &Map<str,&stem> ) : bool
      {
         if! let obj = ItemNamespace._fromStem( items ) {
            nsId = obj.$id;
         }
         return false;
      }##);
   return nsId;
}

pub form NameSpaceCallback( item:&ItemNamespace ): bool;
pub fn DBCtrl.mapNamespaceSuffix( suffix:str, callback:NameSpaceCallback )
{
   self.mapRowList(
      "namespace", "name like '%%.%s' escape '$'" (suffix), nil, nil,
      fn ( items: &Map<str,&stem> ) : bool {
         if! let item = ItemNamespace._fromStem( items ) {
            return callback( item );
         }
         return true;
      }## );         
   self.mapRowList(
      "namespace", "name = '%s'" (suffix), nil, nil,
      fn ( items: &Map<str,&stem> ) : bool {
         if! let item = ItemNamespace._fromStem( items ) {
            return callback( item );
         }
         return true;
      }## );         
}



/**
名前空間を登録する。

@return int 登録後の ID
@return bool 新規登録した場合 true。 登録済みだった場合 false。

*/
pub fn DBCtrl.addNamespace( fullName:str, parentId:int ) mut : int, bool
{
   let mut id:int! = nil;
   self.mapRowList(
      "namespace", "name = '%s'" (fullName), 1, nil, fn( items: &Map<str,&stem> ) : bool
      {
         if! let obj = ItemNamespace._fromStem( items ) {
            id = obj.$id;
         }
         return false;
      }##);
   when! id {
      return id, false;
   }
   let snid = rootNsId;
   let newId = self.idMgrNamespace.getIdNext();
   self.insert( "namespace",
                "%d, %d, %d, '', '%s', '', 1" (newId, snid, parentId, fullName ) );

   return newId, true;
}

pub fn DBCtrl.addOverride( nsId:int, superNsId:int ) mut
{
   self.insert( "override", "%d, %d" (nsId, superNsId ) );
}

pub fn DBCtrl.addAsyncMode(  nsId:int, asyncMode:LnsAst.Async ) mut {
   self.insert( "asyncMode", "%d, %d" ( nsId, asyncMode ) );
}

pub form callbackAsyncMode( item:&ItemAsyncMode ):bool;
pub fn DBCtrl.mapAsyncMode( asyncMode:LnsAst.Async, callback:callbackAsyncMode ) {
   self.mapJoin(
      "asyncMode", "symbolDecl",
      "asyncMode.nsId = symbolDecl.nsId AND asyncMode.mode = %d" (asyncMode),
      nil, nil, "asyncMode.nsId, asyncMode.mode, symbolDecl.fileId, symbolDecl.line",
      fn (items:&Map<str,&stem>): bool
      {
         if! let item = ItemAsyncMode._fromStem( items ) {
            return callback( item );
         }
         return true;
      }##);
}


pub fn DBCtrl.addAllmutDecl( nsId:int ) mut {
   self.insert( "allmutDecl", "%d" ( nsId ) );
}

pub form callbackAllmutDecl( item:&ItemAllmutDecl ):bool;
pub fn DBCtrl.mapAllmutDecl( callback:callbackAllmutDecl ) {
   self.mapJoin(
      "allmutDecl", "symbolDecl", "allmutDecl.nsId = symbolDecl.nsId",
      nil, nil, "allmutDecl.nsId, symbolDecl.fileId, symbolDecl.line",
      fn (items:&Map<str,&stem>): bool
      {
         if! let item = ItemAllmutDecl._fromStem( items ) {
            return callback( item );
         }
         return true;
      }##);
}


pub fn DBCtrl.addSymbolDecl(
   nsId:int, fileId:int, lineNo:int, column:int ) mut
{
   let kind = 0;
   let snid = rootNsId;

   let! parentId = self.getRow(
      "namespace", "id = %d" (nsId), "parentId"## )$[ "parentId" ]
   {
      return;
   };

   self.insert( "symbolDecl",
                "%d, %d, %d, %d, %d, %d, %d, %d, %d, 0, '', 0"
                ( nsId, snid, parentId@@int, kind, fileId,
                  lineNo, column, lineNo, column ) );
}

pub fn DBCtrl.addSymbolRef(
   nsId:int, fileId:int, lineNo:int, column:int, setOp:bool ) mut
{
   let snid = rootNsId;
   let belongNsId = rootNsId;
   self.insert( "symbolRef",
                "%d, %d, %d, %d, %d, %d, %d"
                ( nsId, snid, fileId, lineNo, column, setOp and 1 or 0, belongNsId ) );
}

pub fn DBCtrl.addSymbolSet(
   nsId:int, fileId:int, lineNo:int, column:int ) mut
{
   let snid = rootNsId;
   let belongNsId = rootNsId;
   self.insert( "symbolSet",
                "%d, %d, %d, %d, %d, %d"
                ( nsId, snid, fileId, lineNo, column, belongNsId ) );
}
   
   

fn create( dbPath:str ) : DBCtrl!
{
   Log._log( .Log, "create" );
   let! mut db = DBAccess.open( dbPath, false ) {
      return nil;
   };

   let mut dbCtrl = new DBCtrl( db, false );

   dbCtrl.creataTables();
   
   dbCtrl.begin();
   
   return dbCtrl;
}

pub fn initDB( dbPath:str ) {
   os.remove( dbPath );
   let! mut db = create( dbPath ) {
      print( "create error" );
      return;
   };
   db.commit();
   db.close();
}

pub form callbackSymbolDecl( item:&ItemSymbolDecl ):bool;
pub fn DBCtrl.mapSymbolDecl( name:str, callback:callbackSymbolDecl ) {
   let! nsId = self.getNsId( name ) {
      return;
   };

   // sub クラスの override定義も含める
   let mut overrideStr = "%d" (nsId);
   self.mapRowList(
      "override", "superNsId = %d" (nsId), nil, nil,
      fn (items:&Map<str,&stem>): bool
      {
         if! let item = ItemOverride._fromStem( items ) {
            overrideStr = "%s, %d" (overrideStr, item.$nsId );
         }
         return true;
      }##);
   
   self.mapRowListSort(
      "symbolDecl", "nsId IN (%s)" (overrideStr), nil, nil, "fileId, line",
      fn (items:&Map<str,&stem>): bool
      {
         if! let item = ItemSymbolDecl._fromStem( items ) {
            return callback( item );
         }
         return true;
      }##);
}


pub form callbackSymbolRef( item:&ItemSymbolRef ):bool;
pub fn DBCtrl.mapSymbolRef( name:str, onlySet:bool, callback:callbackSymbolRef ) {
   let! nsId = self.getNsId( name ) {
      return;
   };

   // super クラスからの参照も含める
   let mut overrideStr = "%d" (nsId);
   self.mapRowList(
      "override", "nsId = %d" (nsId), nil, nil,
      fn (items:&Map<str,&stem>): bool
      {
         if! let item = ItemOverride._fromStem( items ) {
            overrideStr = "%s, %d" (overrideStr, item.$superNsId );
         }
         return true;
      }##);

   let mut cond = "nsId IN (%s)" (overrideStr);
   if onlySet {
      cond = "(%s) AND setOp = 1" (cond);
   }
   self.mapRowListSort(
      "symbolRef", cond, nil, nil, "fileId, line",
      fn (items:&Map<str,&stem>): bool
      {
         if! let item = ItemSymbolRef._fromStem( items ) {
            return callback( item );
         }
         return true;
      }##);
}

pub fn DBCtrl.dumpFile() {
   print( "projId" );
   self.mapRowList(
      "projInfo", nil, nil, nil,
      fn (items:&Map<str,&stem>): bool
      {
         print( items.id, items.dir );
         return true;
      }##);

   print( "filePath" );
   self.mapRowList(
      "filePath", nil, nil, nil,
      fn (items:&Map<str,&stem>): bool
      {
         print( items.id, items.projId, items.path, items.mod );
         return true;
      }##);

   print( "subfile" );
   self.mapRowList(
      "subfile", nil, nil, nil,
      fn (items:&Map<str,&stem>): bool
      {
         print( items.mainId, items.subId );
         return true;
      }##);
}

pub fn DBCtrl.dumpAsync() {
   print( "async" );

   self.mapRowList(
      "asyncMode", nil, nil, nil,
      fn (items:&Map<str,&stem>): bool
      {
         print( items.nsId, items.mode );
         return true;
      }##);
}


pub fn DBCtrl.dumpAll()
{
   self.dumpFile();
   
   print( "namespace" );
   self.mapRowList(
      "namespace", nil, nil, nil,
      fn (items:&Map<str,&stem>): bool
      {
         print( items.id, items.name );
         return true;
      }##);

   print( "override" );
   self.mapRowList(
      "override", nil, nil, nil,
      fn (items:&Map<str,&stem>): bool
      {
         print( items.nsId, items.superNsId );
         return true;
      }##);

   print( "symbolDecl" );
   self.mapRowList(
      "symbolDecl", nil, nil, nil,
      fn (items:&Map<str,&stem>): bool
      {
         print( items.nsId, items.fileId, items.line, items.column );
         return true;
      }##);

   print( "symbolRef" );
   self.mapRowList(
      "symbolRef", nil, nil, nil,
      fn (items:&Map<str,&stem>): bool
      {
         print( items.nsId, items.fileId, items.line, items.column );
         return true;
      }##);

   print( "symbolSet" );
   self.mapRowList(
      "symbolSet", nil, nil, nil,
      fn (items:&Map<str,&stem>): bool
      {
         print( items.nsId, items.fileId, items.line, items.column );
         return true;
      }##);
}

pub fn test() : bool {
   let dbPath = "lnstags.sqlite3";
   {
      initDB( dbPath );
   }
   
   let! mut db = open( dbPath, false ) {
      print( "open error" );
      return false;
   };

   let mut fileId = rootNsId;
   foreach path in [ "aa.lns", "bb.lns", "cc.lns" ] {
      fileId = db.addFile( path, (path.gsub( "%.lns", "" )) );
   }


   let mut parentId = rootNsId;
   foreach name, index in [ "@hoge", "@hoge.@foo", "@hoge.@foo.bar" ] {
      let newid = db.addNamespace( name, parentId );
      db.addSymbolDecl( newid, fileId, 100 + index, index * 10 );
      db.addSymbolRef(
         newid, fileId, 200 + index, index * 20, true );
      db.addSymbolSet(
         newid, fileId, 300 + index, index * 30 );

      parentId = newid;
   }


   {
      let _, added = db.addNamespace( "@hoge", rootNsId );
      print( "added", added );
   }

   db.commit();

   db.dumpAll();

   
   return true;
}
