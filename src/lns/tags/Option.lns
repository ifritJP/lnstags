pub enum Mode {
   Init = "init",
   Build = "build",
   Test = "test",
}

pub class Option {
   local let mut pathList:List<str> {pub&};
   local let mut mode:Mode {pub};

   local fn __init() {
      self.pathList = [];
      self.mode = .Build;
   }
}

fn printUsage( messages:str! ) : __ {
   when! messages {
      io.stderr.write( "%s\n" (messages) );
   }
   print( "usage: lnstags init [option]" );
   print( "usage: lnstags build [option] filepath" );
   print( "usage: lnstags test [option]" );
   os.exit( 1 );
}

pub fn analyzeArgs( argList:&List<str> ) : &Option {

   let mut index = 1;
   fn getNextOp():str! {
      if #argList <= index {
         return nil;
      }
      index = index + 1;
      return argList[ index ];
   }

   let mut mode:Mode! = nil;
   let mut option = new Option();
   
   while true {
      let! mut arg = getNextOp() {
         break;
      };

      if arg.find( "^-" ## ) {
      } else {
         if not mode {
            if! let work = Mode._from( arg ) {
               mode = work;
            } else {
               printUsage( "illegal option -- %s" (arg) );
            }
         } else {
            option.pathList.insert( arg );
         }
      }
   }

   when! mode {
      option.mode = mode;

      return option;
   }

   printUsage( "none mode" );
}
