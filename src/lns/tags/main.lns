// -*- coding: utf-8 -*-

import lns.tags.DBCtrl;
import lns.tags.Analyze;
import lns.tags.Option;
import lns.tags.Util;
import lns.tags.Inq;
import lns.tags.Log;


let dbPath = "lnstags.sqlite3";

fn inq( inqMode:Option.InqMode, pattern:str ) : int {
   let! mut db = DBCtrl.open( dbPath, false ) {
      print( "error" );
      return -1;
   };
   switch inqMode {
      case .Def {
         Inq.InqDef( db, pattern );
      }
      case .Ref {
         Inq.InqRef( db, pattern );
      }
   }
   db.close();
   return 0;
}

pub fn __main( args:&List<str> ) : int {


   let option = Option.analyzeArgs( args );

   _switch option.$mode {
      case .Init {
         DBCtrl.initDB( dbPath );
      }
      case .Build {
         let! mut db = DBCtrl.open( dbPath, false ) {
            print( "error" );
            return 1;
         };
         db.commit();
         
         Analyze.start( db, option );
         db.close();
      }
      case .Inq {
         inq( option.$inqMode, option.$pattern );
      }
      case .InqAt {
         let analyzeFileInfo = option.$analyzeFileInfo;
         let! pattern = Analyze.getPatterAt( analyzeFileInfo ) {
            print( "illegal pos -- %s:%d:%d"
                   ( analyzeFileInfo.$path,
                     analyzeFileInfo.$lineNo, analyzeFileInfo.$column ) );
            return 1;
         };
         inq( option.$inqMode, pattern );
      }
      case .Dump {
         let! mut db = DBCtrl.open( dbPath, true ) {
            print( "error" );
            return 1;
         };
         db.dumpAll();

         db.close();
      }
      case .Test {
         DBCtrl.test();
      }
   }
   

   return 0;
}
