// -*- coding: utf-8 -*-

import lns.tags.DBCtrl;
import lns.tags.Option;
import go/github:com.ifritJP.LuneScript.src.lune.base.Option as LnsOpt;
import go/github:com.ifritJP.LuneScript.src.lune.base.Nodes;
import go/github:com.ifritJP.LuneScript.src.lune.base.TransUnit;
import go/github:com.ifritJP.LuneScript.src.lune.base.front;
import go/github:com.ifritJP.LuneScript.src.lune.base.Ast;

class Opt {
}

class tagFilter extend Nodes.Filter<Opt> {
   let option:&Option.Option;
}

pub override fn tagFilter.processRoot(
   node: &Nodes.RootNode, opt:Opt ) mut
{
   let nodeManager = node.$nodeManager;
   foreach workNode in nodeManager.getDeclFuncNodeList() {
      print( "declFunc:", workNode.$pos.lineNo, self.getFull( workNode.$expType, false ) );
   }
   foreach workNode in nodeManager.getDeclMethodNodeList() {
      print( "declMethod:", workNode.$pos.lineNo, self.getFull( workNode.$expType, false ) );
   }
   foreach workNode in nodeManager.getExpRefNodeList() {
      print( "ref:", workNode.$pos.lineNo, workNode.$symbolInfo.$name );
   }
};


fn dumpRoot( rootNode:&Nodes.RootNode, option:&Option.Option ) {
   let mut filter = new tagFilter( true, rootNode.$moduleTypeInfo,
                                   rootNode.$moduleTypeInfo.$scope, option );
   rootNode.processFilter( filter, new Opt() );
}

pub fn start( db:DBCtrl.DBCtrl, option:&Option.Option ) {
   foreach path in option.$pathList {
      let mut lnsOpt = LnsOpt.createDefaultOption( path );
      front.build( lnsOpt, fn ( ast: &TransUnit.ASTInfo ) {
         if! let rootNode = ast.$node@@@Nodes.RootNode {
            dumpRoot( rootNode, option );
         }
      });
   }
}

pub fn test() {
   let mut lnsOpt = LnsOpt.createDefaultOption( "test/main.lns" );
   front.build( lnsOpt, fn ( ast: &TransUnit.ASTInfo ) {

      if! let rootNode = ast.$node@@@Nodes.RootNode {
         dumpRoot( rootNode, Option.analyzeArgs( [ "build" ] ) );
      }
   });
}
